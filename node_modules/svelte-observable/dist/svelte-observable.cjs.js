'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var store = require('svelte/store');

var OBSERVABLE;
function isObservable(value) {
    // Lazy-load Symbol to give polyfills a chance to run
    if (!OBSERVABLE) {
        OBSERVABLE =
            (typeof Symbol === 'function' && Symbol.observable) || '@@observable';
    }
    return value && value[OBSERVABLE] && value[OBSERVABLE]() === value;
}
function deferred(set, initial) {
    var initialized = initial !== undefined;
    var resolve;
    var reject;
    // Set initial value
    set(initialized
        ? initial
        : new Promise(function (_resolve, _reject) {
            resolve = _resolve;
            reject = _reject;
        }));
    return {
        fulfill: function (value) {
            if (initialized)
                return set(Promise.resolve(value));
            initialized = true;
            resolve(value);
        },
        reject: function (error) {
            if (initialized)
                return set(Promise.reject(error));
            initialized = true;
            reject(error);
        }
    };
}

var noop = function () { };
function observe(observable, initial) {
    if (!isObservable(observable)) {
        return store.readable(observable, noop);
    }
    return store.readable(undefined, function (set) {
        var _a = deferred(set, initial), fulfill = _a.fulfill, reject = _a.reject;
        var subscription = observable.subscribe({
            next: function (value) {
                fulfill(value);
            },
            error: function (err) {
                reject(err);
            }
        });
        return function () { return subscription.unsubscribe(); };
    });
}

function flat(subscribable, initial) {
    var is_observable = isObservable(subscribable);
    return store.readable(undefined, function (set) {
        var inner_unsubscribe = null;
        var outer_unsubscribe = null;
        var _a = (is_observable
            ? deferred(set, initial)
            : {}), _b = _a.fulfill, fulfill = _b === void 0 ? function (value) { return set(value); } : _b, reject = _a.reject;
        function next(value) {
            if (inner_unsubscribe) {
                inner_unsubscribe();
                inner_unsubscribe = null;
            }
            if (isObservable(value))
                value = observe(value);
            if (isStore(value)) {
                inner_unsubscribe = value.subscribe(function (inner) { return fulfill(inner); });
            }
            else {
                fulfill(value);
            }
        }
        function error(error) {
            reject(error);
        }
        if (is_observable) {
            var subscription_1 = subscribable.subscribe({
                next: next,
                error: error
            });
            outer_unsubscribe = function () { return subscription_1.unsubscribe(); };
        }
        else {
            outer_unsubscribe = subscribable.subscribe(next);
        }
        return function () {
            if (inner_unsubscribe)
                inner_unsubscribe();
            outer_unsubscribe();
        };
    });
}
function isStore(value) {
    return value && typeof value.subscribe === 'function';
}

exports.flat = flat;
exports.observe = observe;
//# sourceMappingURL=svelte-observable.cjs.js.map
