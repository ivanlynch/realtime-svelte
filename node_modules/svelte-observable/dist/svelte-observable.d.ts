
// FILE GENERATED BY `rollup-plugin-dts@0.12.0`
// https://github.com/Swatinem/rollup-plugin-dts

declare type Unsubscribe = () => void;
declare type Next<T> = (value: T) => void;
interface Subscriber<T> {
    next?: Next<T>;
    error?(error: Error): void;
    complete?(): void;
}
interface Subscription {
    unsubscribe: Unsubscribe;
}
interface Observable<T> {
    subscribe(subscriber: Next<T> | Subscriber<T>): Subscription;
}
interface ReadableStore<T> {
    subscribe(subscriber: Next<T>): Unsubscribe;
}
declare type Deferred<T> = T | Promise<T>;

declare function observe<T>(observable: any, initial?: T): ReadableStore<Deferred<T>>;

declare type Store<T> = ReadableStore<T> & object;
declare type Subscribable<T> = Observable<T> | Store<T>;
declare type Any<T> = T | Observable<T> | Store<T>;
declare function flat<T>(subscribable: Subscribable<Any<T>>, initial?: T): ReadableStore<Deferred<T>>;

export { flat, observe };
